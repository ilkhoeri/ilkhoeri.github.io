{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n  type ComputedFields\n} from \"contentlayer2/source-files\";\n// import { getHighlighter } from \"@shikijs/compat\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport { codeImport } from \"remark-code-import\";\nimport remarkGfm from \"remark-gfm\";\nimport { visit } from \"unist-util-visit\";\n\nexport const computedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    // resolve: doc => `/${doc._raw.flattenedPath}`,\n    resolve: doc => `${doc._raw.flattenedPath}`\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: doc => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\")\n  },\n  url: {\n    type: \"string\",\n    resolve: doc => `/${doc._raw.flattenedPath}`\n  }\n};\n\nconst LinksProperties = defineNestedType(() => ({\n  name: \"LinksProperties\",\n  fields: {\n    doc: {\n      type: \"string\"\n    },\n    api: {\n      type: \"string\"\n    }\n  }\n}));\n\nconst Page = defineDocumentType(() => ({\n  name: \"Page\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true\n    },\n    description: {\n      type: \"string\",\n      required: false\n    },\n    published: {\n      type: \"boolean\",\n      default: false\n    },\n    summary: {\n      type: \"string\",\n      required: false\n    },\n    links: {\n      type: \"nested\",\n      of: LinksProperties\n    },\n    featured: {\n      type: \"boolean\",\n      default: false,\n      required: false\n    },\n    component: {\n      type: \"boolean\",\n      default: false,\n      required: false\n    },\n    toc: {\n      type: \"boolean\",\n      default: true,\n      required: false\n    }\n  },\n  // computedFields: {\n  //   url: {\n  //     type: \"string\",\n  //     resolve: doc => `/${doc._raw.flattenedPath}`\n  //   }\n  // },\n  computedFields\n}));\n\nexport default makeSource({\n  contentDirPath: \"md\",\n  documentTypes: [Page],\n  mdx: {\n    remarkPlugins: [remarkGfm, codeImport],\n    rehypePlugins: [\n      rehypeSlug,\n      //rehypeComponent,\n      () => tree => {\n        visit(tree, node => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children;\n            if (codeEl.tagName !== \"code\") {\n              return;\n            }\n\n            if (codeEl.data?.meta) {\n              // Extract event from meta and pass it down the tree.\n              const regex = /event=\"([^\"]*)\"/;\n              const match = codeEl.data?.meta.match(regex);\n              if (match) {\n                node.__event__ = match ? match[1] : null;\n                codeEl.data.meta = codeEl.data.meta.replace(regex, \"\");\n              }\n            }\n\n            node.__rawString__ = codeEl.children?.[0].value;\n            node.__src__ = node.properties?.__src__;\n            node.__style__ = node.properties?.__style__;\n          }\n        });\n      },\n      [\n        rehypePrettyCode\n        // {\n        //   theme: \"github-dark\",\n        //   getHighlighter,\n        //   onVisitLine(node: any) {\n        //     // Prevent lines from collapsing in `display: grid` mode, and allow empty\n        //     // lines to be copy/pasted\n        //     if (node.children.length === 0) {\n        //       node.children = [{ type: \"text\", value: \" \" }];\n        //     }\n        //   },\n        //   onVisitHighlightedLine(node: any) {\n        //     node.properties.className.push(\"line--highlighted\");\n        //   },\n        //   onVisitHighlightedWord(node: any) {\n        //     node.properties.className = [\"word--highlighted\"];\n        //   }\n        // }\n      ],\n      () => tree => {\n        visit(tree, node => {\n          if (node?.type === \"element\" && node?.tagName === \"div\") {\n            if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n              return;\n            }\n\n            const preElement = node.children.at(-1);\n            if (preElement.tagName !== \"pre\") {\n              return;\n            }\n\n            preElement.properties[\"__withMeta__\"] =\n              node.children.at(0).tagName === \"div\";\n            preElement.properties[\"__rawString__\"] = node.__rawString__;\n\n            if (node.__src__) {\n              preElement.properties[\"__src__\"] = node.__src__;\n            }\n\n            if (node.__event__) {\n              preElement.properties[\"__event__\"] = node.__event__;\n            }\n\n            if (node.__style__) {\n              preElement.properties[\"__style__\"] = node.__style__;\n            }\n          }\n        });\n      },\n      // rehypeNpmCommand,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\"\n          }\n        }\n      ]\n    ]\n  }\n});\n"],
  "mappings": "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",
  "names": []
}
